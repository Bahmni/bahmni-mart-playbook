
- name: Install Liquibase
  yum:
    name: liquibase
    state: present

- name: Get postgresSql jar
  get_url:
    url: "https://jdbc.postgresql.org/download/postgresql-42.2.2.jar"
    dest: "{{ postgresql_jar_location }}"
    mode: 644
    owner: "{{ bahmni_user }}"
    group: "{{ bahmni_group }}"

- name: Run Liquibase migration
  command: "liquibase --driver='org.postgresql.Driver' --classpath='{{ postgresql_jar_location }}/{{ postgresql_jar_name }}' --changeLogFile='{{ liquibase_changelog_path }}' --defaultSchemaName='public' --url=jdbc:postgresql://{{ analytics_db_server }}:{{ analytics_db_port }}/{{ analytics_db_name }} --username={{ analytics_db_user }} --password={{ analytics_db_password }} update"
  when: passive is not defined or passive !='yes'

- name: Set analytics_db_server variable
  set_fact:
    analytics_db_server: "{{ default_docker_ip }}"
  when: analytics_db_server == 'localhost' or analytics_db_server == '127.0.0.1'

- name: Set openmrs_db_server variable
  set_fact:
    openmrs_db_server: "{{ default_docker_ip }}"
  when: openmrs_db_server == 'localhost' or openmrs_db_server == '127.0.0.1'

- name: Install and start docker
  include_role:
    name: docker

- name: Copy docker-compose file for bahmni-mart-scdf
  template:
    src=docker-compose.yml.j2
    dest={{ bahmni_mart_scdf_docker_compose_location }}
    mode=644
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Copy bahmni-mart properties
  template:
    src=application.properties.j2
    dest=/opt/bahmni-mart/properties/application-docker.properties
    mode=644
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Update postgres config
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK bahmni-mart-scdf -->"
    insertafter: "bahmni-mart-scdf"
    state: present
    block: |
      host {{ analytics_db_name }} {{ analytics_db_user }} {{ default_docker_ip }}/16 trust #access through docker IP

- name: Reload postgresql on active machine
  service:
    name=postgresql-{{ postgres_version }}
    state=reloaded
  when: "{{ inventory_hostname in groups['bahmni-mart-db'] }}"

- name: Stop postgresql on passive machine
  service:
    name=postgresql-{{ postgres_version }}
    state=stopped
  when: "{{ inventory_hostname in groups['bahmni-mart-db-slave'] }}"

- name: Check if bahmni-mart-scdf container needs an update
  shell: docker ps -a | grep 'springcloud' | awk '{print $ 2}'
  register: current_scdf_conatiner
  ignore_errors: true

- name: Remove exited containers
  become: yes
  shell: docker rm $(docker ps -f 'status=exited' | grep 'springcloud' | awk '{print $ 1}')
  ignore_errors: true
  when: passive is not defined or passive !='yes' or current_scdf_conatiner.stdout != "{{ dataflow_server_image }}"

- name: Remove stopped containners
  command: docker-compose -f {{ bahmni_mart_scdf_docker_compose_location }} rm
  ignore_errors: true
  when: passive is not defined or passive !='yes' or current_scdf_conatiner.stdout != "{{ dataflow_server_image }}"

- name: Remove dangling images
  become: yes
  shell: docker rmi $(docker images -a | grep 'springcloud' | awk '{print $ 3}')
  ignore_errors: true

- name: Create bahmni-mart-scdf docker conatainer
  command: docker-compose -f {{ bahmni_mart_scdf_docker_compose_location }} up -d

- block:

    - name: Get matched IpTable rule
      shell: iptables -nL --line-numbers | grep MART  -m 1 | cut -c 1-2
      register: matchedRule

    - name: delete matching rule if exists
      shell: iptables -D INPUT {{ matchedRule.stdout }}
      when: matchedRule.stdout!=""

    - name: Allow openmrs port through firewall
      command: /sbin/iptables -I INPUT 1 -p tcp --dport  {{ dataflow_server_port }} -j ACCEPT -m comment --comment "MART DATAFLOW SERVER"

    - name: save iptables
      command: /sbin/iptables-save

- name: Stop bahmni-mart-scdf docker conatainer on passive machine
  command: docker-compose -f {{ bahmni_mart_scdf_docker_compose_location }} stop
  when: passive is defined and passive=='yes'
  ignore_errors: true
